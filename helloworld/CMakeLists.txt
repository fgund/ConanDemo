# Usage example:
# 1) mkdir build && cd build
# 2) conan install .. --build=missing
# 3) cmake .. -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release
# 4) cmake --build .
# 5) ctest
# 6) cpack
cmake_minimum_required(VERSION 3.2)

# Project declarartion
project(ConanDemo VERSION 0.0.1)

# Configure file with a CMake version
configure_file(version.h.in version.h)

# Declaring main executable
add_executable(helloworld_cli main.cpp)
# Declaring library that is used in main program and tests
add_library(helloworld lib.cpp)
# Declaring tests with different test frameworks
add_executable(boost_test_version boost_test_version.cpp)
add_executable(g_test_version g_test_version.cpp)
add_executable(catch_test_version catch_test_version.cpp)

# Declaring dependencies
# Files for find_package are generated by conan.
find_package(Boost REQUIRED)
find_package(GTest REQUIRED)
find_package(Catch2 REQUIRED)

# Setting basic properties for targets
set_target_properties(helloworld_cli helloworld boost_test_version g_test_version catch_test_version PROPERTIES
    CXX_STANDARD 17
    CXX_STANDARD_REQUIRED ON
)

# Path to include dirs
target_include_directories(helloworld
    PRIVATE "${CMAKE_BINARY_DIR}"
)

# Linking libraries to projects
target_link_libraries(helloworld_cli PRIVATE
    helloworld
)
target_link_libraries(boost_test_version
    helloworld
    Boost::unit_test_framework
)

target_link_libraries(g_test_version
    helloworld
    GTest::gtest
)

target_link_libraries(catch_test_version
    helloworld
    Catch2::Catch2
)
# Function to set maximum warning level for compiler 
function(SetMaxWarning _project)
    if (MSVC)
        target_compile_options(${_project} PRIVATE
            /W4 /MD
    )
    else ()
        target_compile_options(${_project} PRIVATE
            -Wall -Wextra -pedantic -Werror
    )
    endif()
endfunction()

SetMaxWarning(helloworld_cli)
SetMaxWarning(helloworld)
SetMaxWarning(boost_test_version)
SetMaxWarning(g_test_version)
SetMaxWarning(catch_test_version)

# For Windows we need to update CMAKE_INSTALL_PREFIX to install correctly
if (MSVC)
  set(CMAKE_INSTALL_PREFIX ${CMAKE_BINARY_DIR}/)
endif()
install(TARGETS helloworld_cli RUNTIME DESTINATION bin)

# Setting CPack generator to create a package
if (MSVC)
    set(CPACK_GENERATOR NSIS)
else ()
    set(CPACK_GENERATOR DEB)
endif()

# Setting CPack options
set(CPACK_PACKAGE_NAME "HelloWorld")

set(CPACK_PACKAGE_VERSION_MAJOR "${PROJECT_VERSION_MAJOR}")
set(CPACK_PACKAGE_VERSION_MINOR "${PROJECT_VERSION_MINOR}")
set(CPACK_PACKAGE_VERSION_PATCH "${PROJECT_VERSION_PATCH}")

set(CPACK_PACKAGE_CONTACT example@example.com)
set(CPACK_RESOURCE_FILE_LICENSE ${CMAKE_SOURCE_DIR}/LICENSE)
set(CPACK_RESOURCE_FILE_README ${CMAKE_SOURCE_DIR}/README.md)

# Activating CPack
include(CPack)

# Activating CTest
enable_testing()

# Register tests for CTest
add_test(boost_test_version "boost_test_version")
add_test(g_test_version "g_test_version")
add_test(catch_test_version "catch_test_version")
